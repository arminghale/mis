// <auto-generated />
using System;
using MIS;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MIS.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20210522152835_7")]
    partial class _7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MIS.Action", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("actiongroupid")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("actiongroupid");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("MIS.ActionGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("samaneid")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("samaneid");

                    b.ToTable("ActionGroup");
                });

            modelBuilder.Entity("MIS.Domain", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAccess")
                        .HasColumnType("bit");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Domain");
                });

            modelBuilder.Entity("MIS.DomainValue", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("domainid")
                        .HasColumnType("int");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("domainid");

                    b.ToTable("DomainValue");
                });

            modelBuilder.Entity("MIS.Field", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("formid")
                        .HasColumnType("int");

                    b.Property<bool>("isnull")
                        .HasColumnType("bit");

                    b.Property<int>("radif")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("formid");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("MIS.Form", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("MIS.RACC", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("actionid")
                        .HasColumnType("int");

                    b.Property<int>("roleid")
                        .HasColumnType("int");

                    b.Property<bool>("type")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("actionid");

                    b.HasIndex("roleid");

                    b.ToTable("RACC");
                });

            modelBuilder.Entity("MIS.RACCDomain", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("domainvalueid")
                        .HasColumnType("int");

                    b.Property<int>("roleid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("domainvalueid");

                    b.HasIndex("roleid");

                    b.ToTable("RACCDomain");
                });

            modelBuilder.Entity("MIS.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("MIS.Samane", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Samane");
                });

            modelBuilder.Entity("MIS.SubDomainValue", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DomainValue2id")
                        .HasColumnType("int");

                    b.Property<int>("domainvalue2id")
                        .HasColumnType("int");

                    b.Property<int>("domainvalueid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("DomainValue2id");

                    b.HasIndex("domainvalue2id");

                    b.ToTable("SubDomainValue");
                });

            modelBuilder.Entity("MIS.SubField", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("fieldid")
                        .HasColumnType("int");

                    b.Property<string>("value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("fieldid");

                    b.ToTable("SubField");
                });

            modelBuilder.Entity("MIS.SubForm", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("form1id")
                        .HasColumnType("int");

                    b.Property<int>("form2id")
                        .HasColumnType("int");

                    b.Property<int>("radif")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("form1id");

                    b.HasIndex("form2id");

                    b.ToTable("SubForm");
                });

            modelBuilder.Entity("MIS.UACC", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("actionid")
                        .HasColumnType("int");

                    b.Property<bool>("type")
                        .HasColumnType("bit");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("actionid");

                    b.HasIndex("userid");

                    b.ToTable("UACC");
                });

            modelBuilder.Entity("MIS.UACCDomain", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("domainvalueid")
                        .HasColumnType("int");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("domainvalueid");

                    b.HasIndex("userid");

                    b.ToTable("UACCDomain");
                });

            modelBuilder.Entity("MIS.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MIS.UserRoles", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("roleid")
                        .HasColumnType("int");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("roleid");

                    b.HasIndex("userid");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("MIS.Action", b =>
                {
                    b.HasOne("MIS.ActionGroup", "ActionGroup")
                        .WithMany("Actions")
                        .HasForeignKey("actiongroupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MIS.ActionGroup", b =>
                {
                    b.HasOne("MIS.Samane", "Samane")
                        .WithMany("ActionGroups")
                        .HasForeignKey("samaneid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MIS.DomainValue", b =>
                {
                    b.HasOne("MIS.Domain", "Domain")
                        .WithMany("DomainValues")
                        .HasForeignKey("domainid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MIS.Field", b =>
                {
                    b.HasOne("MIS.Form", "Form")
                        .WithMany("Fields")
                        .HasForeignKey("formid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MIS.RACC", b =>
                {
                    b.HasOne("MIS.Action", "Action")
                        .WithMany("RACCs")
                        .HasForeignKey("actionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MIS.Role", "Role")
                        .WithMany("RACCs")
                        .HasForeignKey("roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MIS.RACCDomain", b =>
                {
                    b.HasOne("MIS.DomainValue", "DomainValue")
                        .WithMany("RACCDomains")
                        .HasForeignKey("domainvalueid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MIS.Role", "Role")
                        .WithMany("RACCDomains")
                        .HasForeignKey("roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MIS.SubDomainValue", b =>
                {
                    b.HasOne("MIS.DomainValue", "DomainValue2")
                        .WithMany("SubDomainValue2")
                        .HasForeignKey("DomainValue2id");

                    b.HasOne("MIS.DomainValue", "DomainValue")
                        .WithMany("SubDomainValue")
                        .HasForeignKey("domainvalue2id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MIS.SubField", b =>
                {
                    b.HasOne("MIS.Field", "Field")
                        .WithMany("SubFields")
                        .HasForeignKey("fieldid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MIS.SubForm", b =>
                {
                    b.HasOne("MIS.Form", "Form1")
                        .WithMany("SubForms1")
                        .HasForeignKey("form1id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MIS.Form", "Form2")
                        .WithMany("SubForms2")
                        .HasForeignKey("form2id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MIS.UACC", b =>
                {
                    b.HasOne("MIS.Action", "Action")
                        .WithMany("UACCs")
                        .HasForeignKey("actionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MIS.User", "User")
                        .WithMany("UACCs")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MIS.UACCDomain", b =>
                {
                    b.HasOne("MIS.DomainValue", "DomainValue")
                        .WithMany("UACCDomains")
                        .HasForeignKey("domainvalueid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MIS.User", "User")
                        .WithMany("UACCDomains")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MIS.UserRoles", b =>
                {
                    b.HasOne("MIS.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MIS.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
